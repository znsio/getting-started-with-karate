import java.text.SimpleDateFormat

buildscript {
    ext {
        gradleVersionProperty = '7.3.3'
        karateVersion = '1.3.0.RC2'
        masterThoughtVersion = '5.7.2'
        junitPlatformsLauncherVersion = '1.9.0'
        junitReportPortalAgentVersion = '5.1.7'
        log4jVersion = '1.2.17'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

plugins {
    id 'project-report'
    id 'eclipse'
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group 'com.znsio.getting-started-with-karate'
version '0.0.1'

sourceCompatibility = 11

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://plugins.gradle.org/m2/' }
}

sourceSets {
    test {
        resources {
            srcDir file('src/test/java')
            exclude '**/*.java'
        }
    }
}

dependencies {
    implementation "com.intuit.karate:karate-core:${karateVersion}"
    implementation "com.intuit.karate:karate-junit5:${karateVersion}"
    implementation "net.masterthought:cucumber-reporting:${masterThoughtVersion}"
    implementation "org.junit.platform:junit-platform-launcher:${junitPlatformsLauncherVersion}"
    testImplementation "com.epam.reportportal:agent-java-junit5:${junitReportPortalAgentVersion}"
    implementation "log4j:log4j:${log4jVersion}"
    testImplementation 'org.aspectj:aspectjweaver:1.9.2'
}

task karateDebug(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'com.intuit.karate.cli.Main'
}

test {
    useJUnitPlatform()
    // Pull karate options into the runtime
    systemProperty "karate.options", System.getenv("karate.options")
    // Pull karate options into the JVM
    systemProperty "karate.env", System.getenv("env")

    include '**/*Test*'

    // Ensure tests are always run
    outputs.upToDateWhen { false }

    testLogging {
        events "started", "passed", "skipped", "failed"
        // show standard out and standard error of the test JVM(s) on the console
        showStandardStreams = true
        // show full exception trace
        exceptionFormat = 'full'
        showStackTraces = true
        showCauses = true
        showExceptions = true
    }

    // attach debugger
    if (System.getProperty('debug', 'false') == 'true') {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009'
    }
    doFirst {
        def weaver = configurations.testRuntimeClasspath.find { it.name.contains("aspectjweaver") }
        jvmArgs += "-javaagent:$weaver"
    }
}

shadowJar {
    archiveBaseName.set("$project.name")
    archiveClassifier.set('')
    archiveVersion.set("$project.version")
    zip64 true
    manifest {
        attributes "Main-Class": "com.znsio.FatJarRunner"
    }
    from sourceSets.test.output
    from('.') { include 'gradle/**/*' }
    from('.') { include 'gradlew*' }
    from('.') { include 'build.gradle' }
    from('.') { include 'src/test/**/*' }
    destinationDir file("${rootDir}/upload")
    doLast {
        println "Created jar: ${rootDir}/upload/${project.name}-${project.version}.jar"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    duplicatesStrategy = "include"
    archiveClassifier = 'sources'
    from sourceSets.test.allJava
}

artifacts {
    archives sourcesJar
    archives shadowJar
}

task copyToUpload(type: Copy) {
    from 'java/test_data.json'
    into 'upload/src/test/java'
    from 'runAPIWorkflowTests.sh'
    into 'upload'
}

test.dependsOn clean
shadowJar.finalizedBy copyToUpload

wrapper {
    gradleVersion = gradleVersionProperty
}
